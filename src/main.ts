import { renderCategory, renderSubcategory } from './menu/dinamic.menu';
import { Chanell, PrismaClient, Users } from "@prisma/client";
import { getChatMember, getUser } from './user/users';
const { convert } = require('convert-svg-to-png');
import TelegramBot from "node-telegram-bot-api";
import { home } from './menu/static-menu';
import svgCaptcha from 'svg-captcha';

const prisma = new PrismaClient()
const bot = new TelegramBot('5520485548:AAEfXoTQLG0nDPEhA1pBnv_B9NsqF8PaHRY', {polling: true})


bot.on('text', async msg => {
    const chat_id = msg.from!.id
    let text = msg.text
    const { user, new_user } = await getUser(msg)
    let perfix = text?.split(' ')?.[1]
    text = text?.split(' ')[0]
    console.log(perfix);
    
    if (perfix) {
        let id = perfix?.split('vote')[1]
        console.log(id);
        
        let { caption, photo, keyboard } = await renderSubcategory(Number(id))
        if (!photo) return bot.sendMessage(chat_id, "–°—û—Ä–æ–≤–Ω–æ–º–∞ –º–∞–≤–∂—É—Ç –µ–º–∞—Å ‚ùóÔ∏è")
        bot.sendPhoto(chat_id, photo, {
            caption: caption,
            reply_markup: keyboard
        })
    } else if(text == '/start') {
        bot.sendMessage(chat_id, "–ê—Å—Å–∞–ª–æ–º—É –ê–ª–∞–π–∫—É–º.\n–°—û—Ä–æ–≤–Ω–æ–º–∞ –±–æ—Ç–≥–∞ “≥—É—à –∫–µ–ª–∏–±—Å–∏–∑!", {
            reply_markup: home
        })
    } else if (text == '–û–≤–æ–∑ –±–µ—Ä–∏—à') {
        bot.sendMessage(chat_id, "“ö—É–π–∏–¥–∞–≥–∏ –∫—û—Ä—Å–∞—Ç–∏–ª–≥–∞–Ω —Å—û—Ä–æ–≤–Ω–æ–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ üëá", {
            reply_markup: await renderCategory()
        })
    } else if(user.step == 'captcha') {

        if(Object(user.action).captcha == text) {

            let service = await prisma.subcategories.findFirst({where:{id: Object(user.action).subcategory_id}, select: {
                regions:true, name: true, id: true, vote: true
            }})
            if(!service) return bot.sendMessage(chat_id, "–ù–æ–º–∞–ª—É–º —Ö–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏ “õ–∞–π—Ç–∞–¥–∞–Ω —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥")
            let votes:Array<{vote_id:number,category_id: number} | undefined> = Object(user.votes).length ? Object(user.votes) : []

            let is_exists = votes.find(el => el?.category_id == service?.regions.id)
            if(is_exists) 
                return bot.sendMessage(chat_id,
                         `‚ùóÔ∏è–°–∏–∑–Ω–∏–Ω–≥ –æ–≤–æ–∑–∏–Ω–≥–∏–∑ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–º–∞–¥–∏. –°–∏–∑ –∞–≤–≤–∞–ª *${service?.regions.name} ‚Äî ${service?.name}*  –≥–∞ –æ–≤–æ–∑ –±–µ—Ä–∏–± –±—û–ª–≥–∞–Ω—Å–∏–∑`,
                        {parse_mode:'Markdown'})

            votes.push({vote_id:service!.id, category_id:service!.regions.id})
            let txt = `‚úÖ –°–∏–∑–Ω–∏–Ω–≥ *${service?.regions.name} - ${service?.name}* –≥–∞ –±–µ—Ä–≥–∞–Ω –æ–≤–æ–∑–∏–Ω–≥–∏–∑ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏!`
            await prisma.users.update({where: {chat_id: chat_id},data: {votes: Object(votes) , step: 'captcha'}})
            await prisma.subcategories.update({where: {id: service?.id }, data: {
                vote: service!.vote + 1
            }})
            return bot.sendMessage(chat_id,  txt,{parse_mode:'Markdown'} )
        } else { 
            bot.sendMessage(chat_id,  "‚ùå –¢–∞—Å–¥–∏“õ–ª–∞—à –∫–æ–¥–∏ —Ö–∞—Ç–æ!\n –ò–ª—Ç–∏–º–æ—Å “õ–∞–π—Ç–∞–¥–∞–Ω —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥" )
        }
    } 
})

bot.on('callback_query', async msg => {
    let data = msg.data
    const chat_id = msg.from.id
    const { user, new_user } = await getUser(msg)
    let text = data?.split(':')[0]
    data = data?.split(':')[1]
    
    if(text == 'category') {
        let { caption, photo, keyboard } = await renderSubcategory(Number(data))
        bot.deleteMessage(chat_id, msg.message!.message_id)
        bot.sendPhoto(chat_id, photo, {
            caption: caption,
            reply_markup: keyboard
        })
    } else if (text == 'subcategory') {
        let { is_member, not_members } = await getChatMember(bot, msg)
    
        if(!is_member) {
            let keyboard = not_members.map((el, index) => {
                return [{text: index + 1 +' –∫–∞–Ω–∞–ª–≥–∞ –∞–∑–æ –±—û–ª–∏—à', url: 'https://t.me/'+ el.chanell_username}]
            })
            return bot.sendMessage(chat_id, `‚ùóÔ∏è–ò–ª—Ç–∏–º–æ—Å, —Å—û—Ä–æ–≤–Ω–æ–º–∞–¥–∞ –∏—à—Ç–∏—Ä–æ–∫ —ç—Ç–∏—à —É—á—É–Ω “õ—É–π–∏–¥–∞–≥–∏ ${not_members.length} —Ç–∞ –∫–∞–Ω–∞–ª–≥–∞ –∞—ä–∑–æ –±—û–ª–∏–Ω–≥.`, {
                reply_markup: {
                    inline_keyboard: keyboard
                }   
            })
        }

        bot.deleteMessage(chat_id, msg.message!.message_id)
        const captcha = svgCaptcha.createMathExpr({mathMin: 1 + Math.random() * 9 | 0, mathMax: 1 + Math.random() * 9 | 0, width: 200, height: 100});
        
        const pngBuffer = await convert(captcha.data, {
            puppeteer: { args: ['--no-sandbox'] },
        });

        user.action = {
            captcha: captcha.text,
            subcategory_id: Number(data)
        }

        await prisma.users.update({where: {chat_id: chat_id}, data: {action: user.action, step: 'captcha'}})
        bot.sendPhoto(chat_id, pngBuffer, {
            caption: '–ê–º–∞–ª–Ω–∏ –±–∞–∂–∞—Ä–∏–Ω–≥'
        })
    }
})


async function start() {
    for (let index = 0; index < 20; index++) {
        let tuman = await prisma.categories.create({
            data: {
                name: 'Tuman'+index,
                info: {
                    "photo": "https://t.me/Tg_ItBlog/593",
                    "caption":"–ß–£–°–¢ –¢–£–ú–ê–ù–ò (2-–°–ï–ö–¢–û–†)\n–°–é–†–û–í–ù–û–ú–ê | 2023\n‚Äú–ò–ñ–¢–ò–ú–û–ò–ô –¢–ê–†–ú–û“ö –≠–™–¢–ò–†–û–§–ò‚Äù\n–°–ò–ó–ù–ò–ù–ì–ß–ê –ß–£–°–¢ –¢–£–ú–ê–ù–ò–î–ê–ì–ò –ú–ê“≤–ê–õ–õ–ê –†–ê–ò–°–õ–ê–†–ò –û–†–ê–°–ò–î–ê –≠–ù–ì –§–ê–û–õ–ò –ö–ò–ú?\n–≠–°–õ–ê–¢–ú–ê: –û–í–û–ó –ë–ï–†–ò–® –ñ–ê–†–ê–Å–ù–ò 12-–û–ö–¢–Ø–ë–† –°–û–ê–¢ 22:00 –î–ê –Ø–ö–£–ù–ò–ì–ê –ï–¢–ê–î–ò. –≠–ù–ì –ö–é–ü –û–í–û–ó –¢–é–ü–õ–ê–ì–ê–ù –ú–ê“≤–ê–õ–õ–ê –†–ê–ò–°–õ–ê–†–ò –ö–ï–ô–ò–ù–ì–ò –ë–û–°“ö–ò–ß–ì–ê –ô–é–õ–õ–ê–ù–ú–ê –û–õ–ê–î–ò."
                }
            }
        })
        for (let index = 0; index < 10; index++) {
            let res = await prisma.subcategories.create({
                data: {
                    name: 'Maktab'+index,
                    info:{}, 
                    region_id: tuman.id,
                    vote: 0
                }
            })
            console.log(res);
            
            
        }
        
    }
}

// start()